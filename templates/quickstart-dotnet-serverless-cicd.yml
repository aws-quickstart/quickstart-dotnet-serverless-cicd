AWSTemplateFormatVersion: '2010-09-09'
Description: Codepipeline for dotnet serverless CI/CD
Parameters:
  CodePipelineName:
    Type: String
    Description: Name for code pipeline
  GitHubRepositoryName:
    Type: String
    Description: GitHub repository name
    Default: github-repository-name
  GitHubBranchName:
    Type: String
    Description: GitHub branch name
    Default: master
  GitHubOwner:
    Type: String
  GitHubOAuthToken:
    Type: String
    NoEcho: true
  ElasticBeanstalkAppName:
    Type: String
    Description: ElasticBeanStalk application name
  ElasticBeanstalkEnvName:
    Type: String
    Description: ElasticBeanStalk environment name
  ECRRepoName:
    Type: String
    Description: ElasticBeanStalk application name
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: This string can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-dotnet-serverless-cicd/
    Description: S3 key prefix for the Quick Start assets. This prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  CodeBuildContainerImage:
    Type: String
    Description: Ex:<accountId>.dkr.ecr.<region>.amazonaws.com/<imageName>:latest
Resources:
  DotNetECR:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref ECRRepoName
  GenerateDotNetContainer:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: "0.3"
        description: "Create a .NET Framework Container for CodeBuild"
        assumeRole: "{{AutomationAssumeRole}}"
        parameters:
          BucketName: 
            default: ""
            description: "Name of Target S3 Bucket"
            type: "String"
          ECRRepoName: 
            default: ""
            description: "ECR Repo Name"
            type: "String"
          QSS3BucketName:
            default: "aws-quickstart"
            description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
            type: "String"
          QSS3KeyPrefix:
            default: "quickstart-dotnet-serverless-cicd/"
            description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
            type: "String"
          AutomationAssumeRole:
            default: ""
            description: "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf."
            type: "String" 
        mainSteps:
        - name: createStack
          action: aws:createStack
          inputs:
            StackName: "DotNetFrameworkContainer"
            Capabilities: [ "CAPABILITY_IAM" ]
            TemplateBody: |
              Description: "Deploy Instance to Create a Container"
              Parameters:
                LatestAmiId:
                  Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
                  Default: "/aws/service/ami-windows-latest/Windows_Server-2019-English-Core-ContainersLatest"
                QSS3BucketName:
                  AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
                  ConstraintDescription: This string can include numbers, lowercase
                    letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
                    (-).
                  Default: aws-quickstart
                  Description: S3 bucket name for the Quick Start assets. This name
                    can include numbers, lowercase letters, uppercase letters, and hyphens (-).
                    It cannot start or end with a hyphen (-).
                  Type: String
                QSS3KeyPrefix:
                  AllowedPattern: ^[0-9a-zA-Z-/]*$
                  ConstraintDescription: Can include numbers, lowercase letters,
                    uppercase letters, hyphens (-), and forward slash (/).
                  Default: quickstart-dotnet-serverless-cicd/
                  Description: S3 key prefix for the Quick Start assets. This prefix
                    can include numbers, lowercase letters, uppercase letters, hyphens (-), and
                    forward slash (/).
                  Type: String
              Resources:
                SecurityGroup:
                  Type: AWS::EC2::SecurityGroup
                  Properties:
                    GroupDescription: DotNetContainer
                DockerCreateRole: 
                  Type : AWS::IAM::Role
                  Properties:
                    Policies:
                      - PolicyDocument:
                          Version: '2012-10-17'
                          Statement:
                            - Action:
                                - s3:GetObject
                              Resource: !Sub '!Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                              Effect: Allow
                        PolicyName: s3-instance-bucket-policy
                    Path: /
                    ManagedPolicyArns:
                    - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
                    - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
                    AssumeRolePolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                      - Effect: "Allow"
                        Principal:
                          Service:
                          - "ec2.amazonaws.com"
                          - "ssm.amazonaws.com"
                        Action: "sts:AssumeRole"
                IamInstanceProfile:
                  Type: "AWS::IAM::InstanceProfile"
                  Properties:
                    Roles:
                    - !Ref DockerCreateRole
                EC2Instance:
                  Type: "AWS::EC2::Instance"
                  Properties:
                    ImageId: !Ref LatestAmiId
                    InstanceType: "t3.medium"
                    IamInstanceProfile: !Ref IamInstanceProfile
                    Tags:
                    - Key: "Name"
                      Value: "DotNetFrameworkContainer"
        - name: "getInstanceId"
          action: aws:executeAwsApi
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: "tag:Name"
              Values: [ "DotNetFrameworkContainer" ]
            - Name: "instance-state-name"
              Values: [ "running" ]
          outputs:
          - Name: InstanceId
            Selector: "$.Reservations..Instances..InstanceId"
            Type: "StringList"
        - name: "CreateDockerImage"
          action: "aws:runCommand"
          onFailure: "step:deleteStack"
          inputs:
            DocumentName: "AWS-RunRemoteScript"
            InstanceIds:
            - "{{getInstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              sourceType: "S3"
              sourceInfo: !Sub ['{"path": "https://${QSS3Region}.amazonaws.com/{{QSS3BucketName}}/{{QSS3KeyPrefix}}scripts/Dockerfile""}',
                  {QSS3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3]}]
              commandLine: "docker build -t dotnetframeworkbuildtools:latest -m 2GB ."
        - name: "PushDockerImagetoECR"
          action: aws:runCommand
          onFailure: "step:deleteStack"
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - "{{getInstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
            Parameters:
              commands: 
                - |     
                   $Region = (Invoke-RestMethod -Method Get -Uri http://169.254.169.254/latest/dynamic/instance-identity/document).region
                   $AccountID = (Invoke-RestMethod -Method Get -Uri http://169.254.169.254/latest/dynamic/instance-identity/document).accountId
        
                   $ecrurl = $AccountID + '.dkr.ecr.' + $Region + '.amazonaws.com/{{ECRRepoName}}:latest'
        
                   Invoke-Expression -Command (Get-ECRLoginCommand -Region $Region).Command
                   docker tag dotnetframeworkbuildtools:latest $ecrurl
                   docker push $ecrurl
        - name: deleteStack
          action: aws:deleteStack
          isEnd: true
          onFailure: Continue
          inputs:
            StackName: "DotNetFrameworkContainer"
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildServiceRole
    Properties:
      Name: !Sub ${CodePipelineName}-CodeBuild-Project
      Source:
        Type: CODEPIPELINE
        InsecureSsl: false
      Artifacts:
        Type: CODEPIPELINE
        Packaging: NONE
        EncryptionDisabled: false
      Cache:
        Type: NO_CACHE
      Environment:
        Type: WINDOWS_CONTAINER
        Image: !Ref CodeBuildContainerImage
        ComputeType: BUILD_GENERAL1_MEDIUM
        PrivilegedMode: false
      ServiceRole:   !GetAtt 
        - CodeBuildServiceRole
        - Arn
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
        S3Logs:
          Status: DISABLED
  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
  AppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn: 
      - CodePipelineServiceRole
      - CodeBuildProject
      - CodePipelineArtifactStoreBucket
      - CodePipelineServiceRole
    Properties:
      Name: !Ref CodePipelineName
      RoleArn:  !GetAtt 
        - CodePipelineServiceRole
        - Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              RunOrder: 1
              Configuration:
                Branch: !Ref GitHubBranchName
                OAuthToken: !Ref GitHubOAuthToken
                Owner: !Ref GitHubOwner
                PollForSourceChanges: false
                Repo: !Ref GitHubRepositoryName
              OutputArtifacts:
                - Name: SourceArtifact      
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              RunOrder: 1
              Configuration:
                ProjectName: !Ref CodeBuildProject
              OutputArtifacts:
                - Name: BuildArtifact
              InputArtifacts:
                - Name: SourceArtifact
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ElasticBeanstalk
                Version: 1
              RunOrder: 1
              Configuration:
                ApplicationName: !Ref ElasticBeanstalkAppName
                EnvironmentName: !Ref ElasticBeanstalkEnvName
              InputArtifacts:
                - Name: BuildArtifact
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub AWS-CodePipeline-ServiceRole-${CodePipelineName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub AWS-CodePipeline-Service-${CodePipelineName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'iam:PassRole'
                Resource: '*'
                Effect: Allow
                Condition:
                  StringEqualsIfExists:
                    'iam:PassedToService':
                      - cloudformation.amazonaws.com
                      - elasticbeanstalk.amazonaws.com
                      - ec2.amazonaws.com
                      - ecs-tasks.amazonaws.com
              - Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplication'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'rds:*'
                  - 'sqs:*'
                  - 'ecs:*'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'opsworks:CreateDeployment'
                  - 'opsworks:DescribeApps'
                  - 'opsworks:DescribeCommands'
                  - 'opsworks:DescribeDeployments'
                  - 'opsworks:DescribeInstances'
                  - 'opsworks:DescribeStacks'
                  - 'opsworks:UpdateApp'
                  - 'opsworks:UpdateStack'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudformation:DeleteChangeSet'
                  - 'cloudformation:DescribeChangeSet'
                  - 'cloudformation:ExecuteChangeSet'
                  - 'cloudformation:SetStackPolicy'
                  - 'cloudformation:ValidateTemplate'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
                Effect: Allow
              - Effect: Allow
                Action:
                  - 'devicefarm:ListProjects'
                  - 'devicefarm:ListDevicePools'
                  - 'devicefarm:GetRun'
                  - 'devicefarm:GetUpload'
                  - 'devicefarm:CreateUpload'
                  - 'devicefarm:ScheduleRun'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'servicecatalog:ListProvisioningArtifacts'
                  - 'servicecatalog:CreateProvisioningArtifact'
                  - 'servicecatalog:DescribeProvisioningArtifact'
                  - 'servicecatalog:DeleteProvisioningArtifact'
                  - 'servicecatalog:UpdateProduct'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudformation:ValidateTemplate'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecr:DescribeImages'
                Resource: '*'
  CodeBuildServiceRole:
        Type: 'AWS::IAM::Role'
        Properties:
          RoleName: !Sub AWS-CodeBuild-ServiceRole-${CodePipelineName}
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - codebuild.amazonaws.com
                Action: 'sts:AssumeRole'
          Path: /
          Policies:
            - PolicyName: !Sub AWS-CodeBuild-Service-${CodePipelineName}
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Resource: '*'
                      Action:
                      - 'logs:CreateLogGroup'
                      - 'logs:CreateLogStream'
                      - 'logs:PutLogEvents'
                    - Effect: Allow
                      Resource:  !Sub arn:aws:s3:::${AWS::StackName}-codepipelineartifactstore*
                      Action:
                      - 's3:PutObject'
                      - 's3:GetObject'
                      - 's3:GetObjectVersion'
                      - 's3:GetBucketAcl'
                      - 's3:GetBucketLocation'
Outputs:
  CodePipelineName:
    Description: CodePipeline  Name
    Value: !Ref AppPipeline